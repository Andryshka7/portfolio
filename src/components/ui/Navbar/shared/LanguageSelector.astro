---
import type { Locale } from 'types'
import Icon from 'components/ui/Icon.astro'

interface Option {
    locale: Locale
    language: string
}

const options: Option[] = [
    { locale: 'en', language: 'English' },
    { locale: 'ru', language: 'Русский' },
    { locale: 'lv', language: 'Latviešu' }
]

const language = Astro.currentLocale as Locale

const creteLocaleUrl = (locale: Locale) => {
    const pathName = Astro.url.pathname
    const origin = Astro.url.origin

    return `${origin}/${locale}` + pathName.replace(`/${language}`, '')
}
---

<div id='language-selector'>
    <div class='flex cursor-pointer items-center gap-1'>
        <Icon name='Earth' width={28} height={28} class='text-zinc-800 dark:text-white' />

        <h2 class='w-5 text-base font-semibold dark:text-white'>
            {language.toUpperCase()}
        </h2>

        <Icon
            name='Chevron'
            width={16}
            height={16}
            id='language-arrow'
            class='-ml-0.5 transition-transform dark:text-white'
        />
    </div>

    <div
        class='absolute right-10 top-20 hidden rounded-md bg-zinc-200 py-4 dark:bg-[#2A2A67] md:right-16'
        id='options'
    >
        {
            options.map(({ locale, language }) => (
                <a
                    href={creteLocaleUrl(locale)}
                    class='my-1 flex cursor-pointer items-center gap-2.5 px-10 transition hover:bg-zinc-400 hover:bg-opacity-80 dark:hover:bg-[#05CEC2]'
                >
                    <Icon name={`flags/${locale}`} width={24} class='rounded-[3px]' />
                    <h2 class='text-lg font-semibold text-zinc-800 dark:text-white'>{language}</h2>
                </a>
            ))
        }
    </div>
</div>

<script>
    const languageSelector = document.getElementById('language-selector')!
    const arrow = document.getElementById('language-arrow')!
    const options = document.getElementById('options')!

    const toggleLanguageSelector = () => {
        arrow.classList.toggle('rotate-180')
        options.classList.toggle('hidden')
    }

    const hideLanguageSelector = (e: MouseEvent) => {
        if (!options.contains(e.target as Node)) {
            toggleLanguageSelector()
            document.removeEventListener('mousedown', hideLanguageSelector)
        }
    }

    languageSelector.addEventListener('mousedown', (e) => {
        e.stopPropagation()

        if (options.classList.contains('hidden')) {
            toggleLanguageSelector()
            document.addEventListener('mousedown', hideLanguageSelector)
        } else if (!options.contains(e.target as Node)) {
            toggleLanguageSelector()
            document.removeEventListener('mousedown', hideLanguageSelector)
        }
    })
</script>
