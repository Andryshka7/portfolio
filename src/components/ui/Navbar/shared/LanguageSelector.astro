---
import type { Locale } from 'types'
import { Icon } from 'astro-icon/components'

interface Option {
    locale: Locale
    language: string
}

const options: Option[] = [
    { locale: 'en', language: 'English' },
    { locale: 'ru', language: 'Русский' },
    { locale: 'lv', language: 'Latviešu' }
]

const currentLocale = Astro.currentLocale as Locale

const creteLocaleUrl = (locale: Locale) => {
    const pathName = Astro.url.pathname
    const origin = Astro.url.origin

    return `${origin}/${locale}` + pathName.replace(`/${currentLocale}`, '')
}
---

<div class='language-selector'>
    <div class='flex cursor-pointer items-center gap-1'>
        <Icon name='Earth' width={28} height={28} class='text-zinc-800 dark:text-white' />

        <h2 class='w-5 text-base font-semibold dark:text-white'>
            {currentLocale.toUpperCase()}
        </h2>

        <Icon
            name='Chevron'
            width={16}
            height={16}
            class='language-arrow -ml-0.5 dark:text-white'
        />
    </div>

    <div
        class='options absolute right-10 top-20 hidden rounded-md bg-zinc-300 py-4 dark:bg-[#2A2A67] lg:right-16 lg:bg-zinc-200'
    >
        {
            options.map(({ locale, language }) => (
                <a
                    href={creteLocaleUrl(locale)}
                    class='my-1 flex cursor-pointer items-center gap-2.5 px-10 hover:bg-zinc-400 hover:bg-opacity-80 dark:hover:bg-[#05CEC2]'
                >
                    <Icon name={`flags/${locale}`} width={24} class='rounded-[3px]' />
                    <h2 class='text-lg font-semibold text-zinc-800 dark:text-white'>{language}</h2>
                </a>
            ))
        }
    </div>
</div>

<script>
    let isOpen = false

    document.querySelectorAll('.language-selector').forEach((languageSelector) => {
        const arrow = languageSelector.querySelector('.language-arrow')!
        const options = languageSelector.querySelector('.options')!

        const showLanguageSelector = () => {
            isOpen = true
            arrow.classList.add('rotate-180')
            options.classList.remove('hidden')
            document.addEventListener('mousedown', hideLanguageSelector)
        }

        const hideLanguageSelector = () => {
            isOpen = false
            arrow.classList.remove('rotate-180')
            options.classList.add('hidden')
            document.removeEventListener('mousedown', hideLanguageSelector)
        }

        languageSelector.addEventListener('mousedown', (e) => {
            e.stopPropagation()

            if (!isOpen) {
                showLanguageSelector()
            } else if (!options.contains(e.target as Node)) {
                hideLanguageSelector()
            }
        })
    })
</script>
